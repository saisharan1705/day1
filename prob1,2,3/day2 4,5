DAY 1
problem :1

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* numbers, int numbersSize, int target, int* returnSize){
    int i,j;
    int *return_array=malloc(sizeof(int)*2);
    *returnSize=2;
    for(i=0;i<numbersSize;i++)
    {
        for(j=i+1;j<numbersSize;j++)
        {
            if((numbers[i]+numbers[j])==target)
            {
                return_array[0]=i+1;
                return_array[1]=j+1;
                break;
            }
        }
    }
return return_array;
}
    
problem :2

#include <stdio.h>

int main() {
	int t,i,k,l,j;
	scanf("%d",&t);
	for(i=0;i<t;i++)
	{
	    int n;
	    scanf("%d",&n);
	    int a[n-1];
	    for(j=0;j<n-1;j++)
	    {
	        scanf("%d",&a[j]);
	    }
	    for(k=1;k<=n;k++)
	    {
	        int flag=0;
	        for(l=0;l<n-1;l++)
	        {
	            if(k==a[l])
	            {
	                flag=1;
	                break;
	            }
	        }
	        if(flag==0)
	        {
	            printf("%d ",k);
	        }
	    }
	    printf("\n");
	}
}

problem:3



/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* smallerNumbersThanCurrent(int* nums, int numsSize, int* returnSize){
  *returnSize=numsSize;
    int i,j,k;
    int* count=malloc(sizeof(int)*numsSize);
    for(i=0;i<numsSize;i++)
    {
        k=nums[i];
        count[i]=0;
        for(j=0;j<numsSize;j++)
        {
            if(k==nums[j])
            {
                continue;
            }
            else if(k>nums[j])
            {count[i]++;}
        }
        
    }
    return count;
}
DAY 2
problem:4

#include <stdio.h>

int main() 
{
	//code
	int t,i,j,l;
	scanf("%d",&t);
	for(i=0;i<t;i++)
	{
	    int n,d;
	    scanf("%d %d",&n,&d);
	    int a[n],flag=0;
	    for(j=0;j<n;j++)
	    {
	        scanf("%d",&a[j]);
	    }
	    for(l=0;l<n;l++)
	    {
	        if(a[l]==d)
	        {
	            flag=1;
	        }
	    }
	    if(flag==1)
	    {
	        printf("1\n");
	    }
	    else
	    {
	        printf("-1\n");
	    }
	}
	return 0;
}

problem:5


int countNegatives(int** grid, int gridSize, int* gridColSize)
{
    int i,j,count=0;
    int m=gridSize;
    int* n=gridColSize;
    for(i=0;i<m;i++)
    {
        for(j=0;j<*n;j++)
        {
            if(grid[i][j]<0)
            {
                count++;
            }
        }
    }
    return count;
}

day 3

problem:6

#include <stdio.h>

int main() {
	//code
	int t,i,j,k,l;
	scanf("%d",&t);
	for(i=0;i<t;i++)
	{
	    int n;
	    scanf("%d",&n);
	    int a[n+2],nu[2],e[2];
	    int q=0;
	    for(j=0;j<n+2;j++)
	    {
	        scanf("%d",&a[j]);
	    }
	    for(l=0;l<n+2;l++)
	    {
	        for(k=l+1;k<n+2;k++)
	        {
	            if(a[l]==a[k])
	            {
	                nu[q]=a[l];
	                e[q]=k;
	                q++;
	            }
	        }
	    }
	    if(e[0]<e[1])
	    {
	        printf("%d %d",nu[0],nu[1]);
	    }
	    else
	    {
	        printf("%d %d",nu[1],nu[0]);
	    }
	    printf("\n");
	}
	return 0;
}

