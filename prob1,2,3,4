problem :1

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* numbers, int numbersSize, int target, int* returnSize){
    int i,j;
    int *return_array=malloc(sizeof(int)*2);
    *returnSize=2;
    for(i=0;i<numbersSize;i++)
    {
        for(j=i+1;j<numbersSize;j++)
        {
            if((numbers[i]+numbers[j])==target)
            {
                return_array[0]=i+1;
                return_array[1]=j+1;
                break;
            }
        }
    }
return return_array;
}
    
problem :2

#include <stdio.h>

int main() {
	int t,i,k,l,j;
	scanf("%d",&t);
	for(i=0;i<t;i++)
	{
	    int n;
	    scanf("%d",&n);
	    int a[n-1];
	    for(j=0;j<n-1;j++)
	    {
	        scanf("%d",&a[j]);
	    }
	    for(k=1;k<=n;k++)
	    {
	        int flag=0;
	        for(l=0;l<n-1;l++)
	        {
	            if(k==a[l])
	            {
	                flag=1;
	                break;
	            }
	        }
	        if(flag==0)
	        {
	            printf("%d ",k);
	        }
	    }
	    printf("\n");
	}
}

problem:3



/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* smallerNumbersThanCurrent(int* nums, int numsSize, int* returnSize){
  *returnSize=numsSize;
    int i,j,k;
    int* count=malloc(sizeof(int)*numsSize);
    for(i=0;i<numsSize;i++)
    {
        k=nums[i];
        count[i]=0;
        for(j=0;j<numsSize;j++)
        {
            if(k==nums[j])
            {
                continue;
            }
            else if(k>nums[j])
            {count[i]++;}
        }
        
    }
    return count;
}

problem:4

#include<stdio.h>
#include<string.h>
int main() 
{
    int i,t,count=0,count1=0;
    char s[1000000];
    scanf("%s",s);
    scanf("%d",&t);
    for(i=0;i<strlen(s);i++)
    {
        if(s[i]=='a')
        {
            count++;
            if(count==t)
            {
                printf("a");
                break;
            }
        }
        if(s[i]=='b')
        {
            count1++;
            if(count1==t)
            {
                printf("b");
                break;
            }
        }
    }
}
